apply plugin: 'com.android.model.application'

model {
  android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    ndk {
      moduleName "main"
      CFlags.addAll("-DGL_GLEXT_PROTOTYPES", "-std=gnu99", "-fno-omit-frame-pointer", "-fno-pie", "-fstrict-aliasing", "-Werror=strict-aliasing", "-DDISABLE_HTTP", "-DDISABLE_NETWORK", "-DDISABLE_TWITCH", "-fPIC")
      cppFlags.addAll("-std=gnu++11", "-fno-omit-frame-pointer", "-fno-pie", "-fstrict-aliasing", "-Werror=strict-aliasing", "-DDISABLE_HTTP", "-DDISABLE_NETWORK", "-DDISABLE_OPENGL", "-fexceptions", "-DDISABLE_TWITCH", "-fPIC")
      ldLibs.addAll(["dl", "GLESv1_CM", "GLESv2", "log", "android", "z"])
      cppFlags.add("-DDEBUG=0")
      CFlags.add("-DDEBUG=0")
      stl 'c++_shared'
      abiFilters.addAll(["armeabi", "armeabi-v7a", "x86"])
      platformVersion 16
    }

    defaultConfig {
      applicationId "org.openrct.android"
      minSdkVersion.apiLevel 16
      targetSdkVersion.apiLevel 23
      versionCode 1
      versionName "1.0"

      buildConfigFields {
        create() {
          type "int"
          name "VALUE"
          value "1"
        }
      }
    }
    buildTypes {
      release {
        minifyEnabled false
        //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      }
    }
  }

  android.sources {
    main {
      jni {
        source {
          srcDir "../../../src"
          //exclude "platform/posix.c"
        }
        dependencies {
          project ":sdl"
          project ":sdl-ttf"
          project ":libjansson"
          project ":libpng"
          project ":libspeexdsp"
        }
      }
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  testCompile 'junit:junit:4.12'
  compile 'commons-io:commons-io:2.5'
  compile 'com.android.support:appcompat-v7:23.3.0'
}

task createSegmentFile() {
  ext.srcFile = file('../../../openrct2.exe')
  ext.destFile = new File(buildDir, "openrct2_load")
  inputs.file srcFile
  outputs.file destFile

  doLast {
    delete(destFile)
    exec {
      executable "dd"
      args "if=${srcFile}", "of=${destFile}", "bs=4096", "skip=1", "count=1187"
    }
    exec {
      executable "dd"
      args "if=${srcFile}", "of=${destFile}", "bs=4096", "skip=1188", "seek=1187", "count=318"
    }
    exec {
      executable "dd"
      args "if=/dev/zero", "of=${destFile}", "bs=4096", "seek=1505", "count=2630", "conv=notrunc"
    }
    exec {
      executable "dd"
      args "if=/dev/zero", "of=${destFile}", "bs=4096", "skip=1506", "seek=4135", "count=1", "conv=notrunc"
    }
  }
}

task copySegmentFile(type: Copy) {
  from '/Users/Marijn/temp/openrct2_load'
  into 'src/main/assets'
}

task copyLanguageAssets(type: Copy) {
  from '../../../data'
  into 'src/main/assets/data'
}

tasks.whenTaskAdded { mergeAssetsTask ->
  if (!mergeAssetsTask.hasProperty("variantName") || mergeAssetsTask.variantName == null) {
    return;
  }

  String variant = mergeAssetsTask.variantName.capitalize()
  if (mergeAssetsTask.name != "merge${variant}Assets") {
    return;
  }

  mergeAssetsTask.dependsOn copyLanguageAssets
  mergeAssetsTask.dependsOn copySegmentFile
}
